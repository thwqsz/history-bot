from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import random
import json
import os
from pathlib import Path

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
Path("data").mkdir(exist_ok=True)

def load_country_data(country_code):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        file_path = f"data/{country_code}/info.json"
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return None

def format_topic_info(topic):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    result = [topic['title'], topic['description']]
    
    if 'founded' in topic:
        result.append(f"–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: {topic['founded']}")
    
    if 'details' in topic:
        result.append("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        result.extend([f"‚Ä¢ {detail}" for detail in topic['details']])
    
    if 'achievements' in topic:
        result.append("\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:")
        result.extend([f"‚Ä¢ {achievement}" for achievement in topic['achievements']])
    
    return "\n".join(result)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"
roulette_questions = {
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": [
        {
            "question": "–ö–æ–≥–¥–∞ –§—Ä–∞–Ω—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —è–¥–µ—Ä–Ω—ã–π —Ä–µ–∞–∫—Ç–æ—Ä?",
            "options": ["1945", "1948", "1951"],
            "answer": "1948"
        }
    ],
    "üá∫üá∏ –°–®–ê": [
        {
            "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –°–®–ê —Å–±—Ä–æ—Å–∏–ª–∏ –ø–µ—Ä–≤—É—é –∞—Ç–æ–º–Ω—É—é –±–æ–º–±—É?",
            "options": ["1943", "1945", "1947"],
            "answer": "1945"
        }
    ]
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
test_questions = {
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": [
        {
            "question": "–ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ–µ–∑–¥ TGV?",
            "options": ["1960-–µ", "1970-–µ", "1980-–µ"],
            "answer": "1970-–µ"
        },
        {
            "question": "–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞ –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ Mirage?",
            "options": ["Airbus", "Dassault", "Renault"],
            "answer": "Dassault"
        }
    ],
    "üá∫üá∏ –°–®–ê": [
        {
            "question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∞ Apollo?",
            "options": ["1961", "1965", "1969"],
            "answer": "1961"
        },
        {
            "question": "–ö—Ç–æ –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê –≤ 1963 –≥–æ–¥—É?",
            "options": ["–õ–∏–Ω–¥–æ–Ω –î–∂–æ–Ω—Å–æ–Ω", "–î–∂–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏", "–†–∏—á–∞—Ä–¥ –ù–∏–∫—Å–æ–Ω"],
            "answer": "–î–∂–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏"
        }
    ]
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
country_info = {
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": {
        "üè´ –í—É–∑—ã": [
            "üéì √âcole Polytechnique\n–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: 1794\n–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤—É–∑–æ–≤ –§—Ä–∞–Ω—Ü–∏–∏\n–ò–∑–≤–µ—Å—Ç–µ–Ω —Å–∏–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —à–∫–æ–ª–æ–π",
            "üéì –°–æ—Ä–±–æ–Ω–Ω–∞\n–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: 1257\n–°—Ç–∞—Ä–µ–π—à–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –§—Ä–∞–Ω—Ü–∏–∏\n–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
            "üéì √âcole Normale Sup√©rieure\n–≠–ª–∏—Ç–Ω–æ–µ –≤—ã—Å—à–µ–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—É–∫–∞—Ö"
        ],
        "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
            "‚ö° –Ø–¥–µ—Ä–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞\n56 –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∞–∫—Ç–æ—Ä–æ–≤\n70% —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —Å—Ç—Ä–∞–Ω—ã",
            "üöÑ TGV (High-speed rail)\n–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ 320 –∫–º/—á\n–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ",
            "‚úàÔ∏è Airbus\n–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ª–∏–¥–µ—Ä –∞–≤–∏–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∞–≤–∏–∞—Ü–∏–∏"
        ],
        "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏": [
            "üõ´ Dassault Aviation\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å –≤–æ–µ–Ω–Ω—ã—Ö –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö —Å–∞–º–æ–ª–µ—Ç–æ–≤\n–°–æ–∑–¥–∞—Ç–µ–ª—å –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π Mirage –∏ Rafale",
            "‚ö° EDF\n–ö—Ä—É–ø–Ω–µ–π—à–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è\n–õ–∏–¥–µ—Ä –≤ —è–¥–µ—Ä–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ",
            "üöó Renault\n–ü–∏–æ–Ω–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ—Å—Ç—Ä–æ–µ–Ω–∏—è\n–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è—Ö"
        ]
    },
    "üá∫üá∏ –°–®–ê": {
        "üè´ –í—É–∑—ã": [
            "üéì MIT\n–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: 1861\n–ú–∏—Ä–æ–≤–æ–π –ª–∏–¥–µ—Ä –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏",
            "üéì Stanford University\n–°–µ—Ä–¥—Ü–µ –ö—Ä–µ–º–Ω–∏–µ–≤–æ–π –¥–æ–ª–∏–Ω—ã\n–õ–∏–¥–µ—Ä –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫–∞—Ö",
            "üéì Harvard University\n–°—Ç–∞—Ä–µ–π—à–∏–π –≤—É–∑ –°–®–ê\n–ü—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä –≤ –Ω–∞—É–∫–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
        ],
        "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
            "üöÄ NASA\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ Apollo\n–ú–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–µ —Ä–æ–≤–µ—Ä—ã\n–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ç–µ–ª–µ—Å–∫–æ–ø Hubble",
            "üíª Silicon Valley\n–¶–µ–Ω—Ç—Ä –º–∏—Ä–æ–≤–æ–π IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üß¨ –ë–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n–ü–µ—Ä–µ–¥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –≥–µ–Ω–µ—Ç–∏–∫–µ\n–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        ],
        "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏": [
            "üöÄ SpaceX\n–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏\n–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Ä–∞–∫–µ—Ç—ã-–Ω–æ—Å–∏—Ç–µ–ª–∏",
            "üñ•Ô∏è Apple\n–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö\n–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω",
            "ü§ñ Boston Dynamics\n–ü–µ—Ä–µ–¥–æ–≤–∞—è —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞\n–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        ]
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–º–∞–º–∏
def create_topics_keyboard(topics):
    print("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–º:")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard_buttons = []
    for topic in topics:
        title = topic.split('\n')[0]
        print(f"–î–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É: {title}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard_buttons.append([title])
    keyboard_buttons.append(["üîô –ù–∞–∑–∞–¥"])
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_buttons}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [["üìã –¢–µ—Å—Ç", "‚ò†Ô∏è –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"],
     ["üè´ –í—É–∑—ã", "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏"],
     ["üîô –ù–∞–∑–∞–¥"]],
    resize_keyboard=True
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
countries_keyboard = ReplyKeyboardMarkup(
    [
        ["üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üáÆüá≥ –ò–Ω–¥–∏—è", "üáµüá± –ü–æ–ª—å—à–∞"],
        ["üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "üá∫üá∏ –°–®–ê", "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"],
        ["üá®üá≥ –ö–∏—Ç–∞–π"]
    ],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        if "category" in user_states.get(user_id, {}):
            # –ï—Å–ª–∏ –º—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ —Ç–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä—É–±—Ä–∏–∫–∏
            del user_states[user_id]["category"]
            await update.message.reply_text(
                f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é {user_states[user_id]['country']}. –í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–±—Ä–∏–∫—É:",
                reply_markup=main_menu_keyboard
            )
            return
        if "country" in user_states.get(user_id, {}):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã
            del user_states[user_id]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)
            return
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)
        return

    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
    all_countries = ["üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üáÆüá≥ –ò–Ω–¥–∏—è", "üáµüá± –ü–æ–ª—å—à–∞", "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è", "üá∫üá∏ –°–®–ê",
                     "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "üá®üá≥ –ö–∏—Ç–∞–π"]
    country_codes = {
        "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": "france",
        "üá∫üá∏ –°–®–ê": "usa",
        # –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω
    }

    if text in all_countries:
        country_code = country_codes.get(text)
        if country_code:
            country_data = load_country_data(country_code)
            if country_data:
                user_states[user_id] = {
                    "country": text,
                    "country_code": country_code,
                    "data": country_data
                }
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=main_menu_keyboard
                )
                return
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=countries_keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É
    if user_id not in user_states:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)
        return

    country = user_states[user_id]["country"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {
        "üè´ –í—É–∑—ã": "universities",
        "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "technologies",
        "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏": "companies"
    }

    if text in categories:
        category = categories[text]
        country_data = user_states[user_id]["data"]
        
        if category in country_data:
            topics = country_data[category]
            keyboard = [[topic['title']] for topic in topics]
            keyboard.append(["üîô –ù–∞–∑–∞–¥"])
            user_states[user_id]["category"] = category
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return
        
        await update.message.reply_text(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {text.lower()} —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=main_menu_keyboard
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
    if "category" in user_states[user_id]:
        category = user_states[user_id]["category"]
        country_data = user_states[user_id]["data"]
        topics = country_data[category]

        for topic in topics:
            if topic['title'] == text:
                keyboard = [[t['title']] for t in topics]
                keyboard.append(["üîô –ù–∞–∑–∞–¥"])
                
                await update.message.reply_text(
                    topic['text'],
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                )
                return

    if text == "‚ò†Ô∏è –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞":
        if country not in roulette_questions:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return
        question = random.choice(roulette_questions[country])
        user_states[user_id]["current_question"] = question

        keyboard = ReplyKeyboardMarkup([[opt] for opt in question["options"]] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text(question["question"], reply_markup=keyboard)
        return

    if text == "üìã –¢–µ—Å—Ç":
        if country not in test_questions:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞.")
            return
        questions = random.sample(test_questions[country], k=min(5, len(test_questions[country])))
        user_states[user_id]["test"] = {
            "questions": questions,
            "current_index": 0,
            "score": 0
        }
        q = questions[0]
        keyboard = ReplyKeyboardMarkup([[opt] for opt in q["options"]] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å 1: {q['question']}", reply_markup=keyboard)
        return

    if "current_question" in user_states.get(user_id, {}):
        question = user_states[user_id]["current_question"]
        if text in question["options"]:
            if text == question["answer"]:
                await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")
            del user_states[user_id]["current_question"]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
            return

    if "test" in user_states.get(user_id, {}):
        test_data = user_states[user_id]["test"]
        current_index = test_data["current_index"]
        current_q = test_data["questions"][current_index]

        if text in current_q["options"]:
            if text == current_q["answer"]:
                test_data["score"] += 1
                await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['answer']}")

            test_data["current_index"] += 1

            if test_data["current_index"] < len(test_data["questions"]):
                next_q = test_data["questions"][test_data["current_index"]]
                keyboard = ReplyKeyboardMarkup([[opt] for opt in next_q["options"]] + [["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)
                await update.message.reply_text(
                    f"–í–æ–ø—Ä–æ—Å {test_data['current_index'] + 1}: {next_q['question']}",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    f"üßÆ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {test_data['score']} –∏–∑ {len(test_data['questions'])}",
                    reply_markup=main_menu_keyboard
                )
                del user_states[user_id]["test"]
            return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

if __name__ == "__main__":
    TOKEN = "7742146854:AAEg9VGTTpHCC5d46sn_fEPHuyIDfnyMbNw"  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()