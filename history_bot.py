from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
import random

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"
roulette_questions = {
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": [
        {
            "question": "–ö–æ–≥–¥–∞ –§—Ä–∞–Ω—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —è–¥–µ—Ä–Ω—ã–π —Ä–µ–∞–∫—Ç–æ—Ä?",
            "options": ["1945", "1948", "1951"],
            "answer": "1948"
        }
    ],
    "üáÆüá≥ –ò–Ω–¥–∏—è": [
        {
            "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ ISRO?",
            "options": ["1962", "1969", "1975"],
            "answer": "1969"
        }
    ],
    "üáµüá± –ü–æ–ª—å—à–∞": [
        {
            "question": "–ö–æ–≥–¥–∞ –±—ã–ª –æ—Å–Ω–æ–≤–∞–Ω –í–∞—Ä—à–∞–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?",
            "options": ["1915", "1920", "1933"],
            "answer": "1915"
        }
    ]
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
test_questions = {
    "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": [
        {
            "question": "–ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ–µ–∑–¥ TGV?",
            "options": ["1960-–µ", "1970-–µ", "1980-–µ"],
            "answer": "1970-–µ"
        },
        {
            "question": "–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–∞ –∏—Å—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ Mirage?",
            "options": ["Airbus", "Dassault", "Renault"],
            "answer": "Dassault"
        }
    ],
    "üáÆüá≥ –ò–Ω–¥–∏—è": [
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –ø–µ—Ä–≤—ã–π —Å–ø—É—Ç–Ω–∏–∫ –ò–Ω–¥–∏–∏?",
            "options": ["Aryabhata", "Chandrayaan", "Vikram"],
            "answer": "Aryabhata"
        },
        {
            "question": "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ Tata Steel?",
            "options": ["1907", "1920", "1951"],
            "answer": "1907"
        }
    ],
    "üáµüá± –ü–æ–ª—å—à–∞": [
        {
            "question": "–ö–æ–≥–¥–∞ –ü–æ–ª—å—à–∞ —Å—Ç–∞–ª–∞ —á–ª–µ–Ω–æ–º –û–û–ù?",
            "options": ["1945", "1956", "1961"],
            "answer": "1945"
        },
        {
            "question": "–ö—Ç–æ –±—ã–ª –ª–∏–¥–µ—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏—è ¬´–°–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç—å¬ª?",
            "options": ["–í–∞–ª–µ—Å—Å–∞", "–ö–∞—á–∏–Ω—å—Å–∫–∏–π", "–¢—É—Å–∫"],
            "answer": "–í–∞–ª–µ—Å—Å–∞"
        }
    ]
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [["üìã –¢–µ—Å—Ç", "‚ò†Ô∏è –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"],
     ["üè´ –í—É–∑—ã", "‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏"]],
    resize_keyboard=True
)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
countries_keyboard = ReplyKeyboardMarkup(
    [["üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üáÆüá≥ –ò–Ω–¥–∏—è", "üáµüá± –ü–æ–ª—å—à–∞"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
    if text in ["üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "üáÆüá≥ –ò–Ω–¥–∏—è", "üáµüá± –ü–æ–ª—å—à–∞"]:
        user_states[user_id] = {"country": text}
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É
    if user_id not in user_states:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É.", reply_markup=countries_keyboard)
        return

    country = user_states[user_id]["country"]

    # –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞
    if text == "‚ò†Ô∏è –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞":
        question = random.choice(roulette_questions[country])
        user_states[user_id]["current_question"] = question

        options = question["options"]
        keyboard = ReplyKeyboardMarkup([[opt] for opt in options], resize_keyboard=True)
        await update.message.reply_text(question["question"], reply_markup=keyboard)
        return

    # –¢–µ—Å—Ç
    if text == "üìã –¢–µ—Å—Ç":
        questions = random.sample(test_questions[country], k=min(5, len(test_questions[country])))

        user_states[user_id]["test"] = {
            "questions": questions,
            "current_index": 0,
            "score": 0
        }

        q = questions[0]
        keyboard = ReplyKeyboardMarkup([[opt] for opt in q["options"]], resize_keyboard=True)
        await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å 1: {q['question']}", reply_markup=keyboard)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞"
    if "current_question" in user_states[user_id]:
        question = user_states[user_id]["current_question"]
        if text in question["options"]:
            if text == question["answer"]:
                await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")
            del user_states[user_id]["current_question"]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç–µ
    if "test" in user_states[user_id]:
        test_data = user_states[user_id]["test"]
        current_index = test_data["current_index"]
        current_q = test_data["questions"][current_index]

        if text in current_q["options"]:
            if text == current_q["answer"]:
                test_data["score"] += 1
                await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ!")
            else:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['answer']}")

            test_data["current_index"] += 1

            if test_data["current_index"] < len(test_data["questions"]):
                next_q = test_data["questions"][test_data["current_index"]]
                keyboard = ReplyKeyboardMarkup([[opt] for opt in next_q["options"]], resize_keyboard=True)
                await update.message.reply_text(
                    f"–í–æ–ø—Ä–æ—Å {test_data['current_index'] + 1}: {next_q['question']}",
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    f"üßÆ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {test_data['score']} –∏–∑ {len(test_data['questions'])}",
                    reply_markup=main_menu_keyboard
                )
                del user_states[user_id]["test"]
            return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

if __name__ == "__main__":
    import os

    TOKEN = "7742146854:AAEg9VGTTpHCC5d46sn_fEPHuyIDfnyMbNw"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
